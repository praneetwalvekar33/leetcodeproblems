package binarysearch;
// https://leetcode.com/problems/search-in-rotated-sorted-array-ii/
public class SearchInRotatedSortedDulicateArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {2,5,6,0,0,1,2};
		int target = 0;
		boolean contains = search(nums, target);
		System.out.println(contains);
	}
	
	public static boolean search(int[] nums, int target) {
        boolean contains = false;
        
        int peakElementIndex = searchIndexOfPeakElement(nums);
        if(nums[peakElementIndex] == target) {
        	return true;
        }
        if(nums[peakElementIndex] < target) {
        	contains = binarySearch(nums, target, 0, peakElementIndex-1);
        }
        else {
        	contains = binarySearch(nums, target, peakElementIndex+1, nums.length-1);
        }
        return contains;
    }
	
	public static int searchIndexOfPeakElement(int[] nums) {
		
		int start = 0;
		int end = nums.length-1;
		if(nums[start] < nums[end]) {
			return end;
		}
		int index = -1;
		while(start < end) {
			int mid = start + (end-start) / 2;
			if(nums[start] < nums[mid]) {
				start = mid;
			}
			else if(nums[start] > nums[mid]) {
				end  = mid;
			}
			else {
				index = start;
				break;
			}
		}
		return index;
	}
	
	public static boolean binarySearch(int[] nums, int target, int start, int end) {
		if(nums.length == 1 && nums[0] == target) {
			return true;
		}
		
		boolean contains = false;
		while(start <= end) {
			int mid = start + (end-start) / 2;
			if(nums[mid] < target) {
				start = mid+1;
			}
			else if(nums[mid] > target) {
				end = mid-1;
			}
			else {
				contains = true;
				break;
			}
		}
		return contains;
	}
}
